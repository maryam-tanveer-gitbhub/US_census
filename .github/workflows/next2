import pandas as pd
import glob

df = pd.read_csv('/Users/maryamtanveer/Desktop/output2.csv')
# Okie now that the file looks good, let's go through and group columns together and start rearranging things
#df_new = pd.DataFrame()
#column_name = 'State+Year'
#df_new[column_name] = pd.Series(dtype='string')

#print(df.iloc[:, 1])

string_to_add = ["_2013", "_2014", "_2015", "_2016", "_2017", "_2018", "_2019", "_2021", "_2022"]

# Identify every other column
chunk_size = 18

for i in range(1, df.shape[1], chunk_size):
    columns_to_modify = df.columns[i::2]  # This selects every second column
    for col, suffix in zip(columns_to_modify, string_to_add):
         df[col] = df[col].astype(str) + suffix

# print(df)
csv_file_name = '/Users/maryamtanveer/Desktop/output3.csv'
df.to_csv(csv_file_name, index=False)
print(f'CSV file "{csv_file_name}" created successfully.')

column_pairs = [(col1, col2) for col1, col2 in zip(df.columns[1::2], df.columns[::2])]

# Iterate through the column pairs, switch their order, and save as separate CSV files

output_folder = '/Users/maryamtanveer/Desktop/Pairs of Data/'
string_to_add = ["_2013", "_2014", "_2015", "_2016", "_2017", "_2018", "_2019", "_2021", "_2022"]

for index, (col1, col2) in enumerate(column_pairs):
    # Switch the order of columns
    switched_df = df[[col1, col2]]  # Specify the order explicitly

    # Generate a file name based on the column names and the corresponding string_to_add
    file_name = f"{col1}_switched_{col2}" + str(string_to_add[index % len(string_to_add)]) + ".csv"

    # Save the switched DataFrame as a CSV file
    switched_df.to_csv(output_folder + file_name, index=False)




# FINAL STEP BABY


input_folder = '/Users/maryamtanveer/Desktop/Pairs of Data/'

# Get a list of all CSV files in the folder
all_files = glob.glob(input_folder + "*.csv")

# Group files by year
files_by_year = {}

for file_path in all_files:
    # Extract the state and year from the file name
    state, year = file_path.split('/')[-1].split()[:2]

    # Create a key for the year
    key = f"{state}_{year}"

    # Add the file to the corresponding year group
    if key not in files_by_year:
        files_by_year[key] = []
    files_by_year[key].append(file_path)

# Iterate through each year and merge the corresponding files
for key, files_in_year in files_by_year.items():
    # Initialize an empty DataFrame to store the merged data
    merged_df = pd.DataFrame()

    # Merge the DataFrames for the current year
    for file_path in files_in_year:
        df = pd.read_csv(file_path)
        # Use the row index for merging
        merged_df = pd.concat([merged_df, df.set_index(df.columns[0])], axis=1, sort=False)

    # Save the merged DataFrame to a new CSV file
    output_file = f'/Users/maryamtanveer/Desktop/Merged_Data/{key}.csv'
    merged_df.reset_index().to_csv(output_file, index=False)
